cats2$EPOCH[cats2$YEAR >= 1700 & cats2$YEAR <= 1799] <-  "18C"
cats2$EPOCH[cats2$YEAR >= 1800 & cats2$YEAR <= 1899] <-  "19C"
cats2$EPOCH[cats2$YEAR >= 1900 & cats2$YEAR <= 1949] <-  "1900-"
cats2$EPOCH[cats2$YEAR >= 1950 & cats2$YEAR <= 1974] <-  "1950-"
cats2$EPOCH[cats2$YEAR >= 1975] <-  "1975+"
cats2$EPOCH
str(cats2EPOCH)
str(cats2$EPOCH)
as.factor(cats2$EPOCH)
?as.factor
cats2$EPOCH <- c()
cats2$EPOCH[cats2$YEAR < 1600] <-  "<1600"
cats2$EPOCH[cats2$YEAR >= 1600 & cats2$YEAR <= 1699] <-  "17C"
cats2$EPOCH[cats2$YEAR >= 1700 & cats2$YEAR <= 1799] <-  "18C"
cats2$EPOCH[cats2$YEAR >= 1800 & cats2$YEAR <= 1899] <-  "19C"
cats2$EPOCH[cats2$YEAR >= 1900 & cats2$YEAR <= 1949] <-  "1900-"
cats2$EPOCH[cats2$YEAR >= 1950 & cats2$YEAR <= 1974] <-  "1950-"
cats2$EPOCH[cats2$YEAR >= 1975] <-  "1975+"
as.ordered(cats2$EPOCH)
cats2$EPOCH <- c()
cats2$EPOCH[cats2$YEAR < 1600] <-  "<1600"
cats2$EPOCH[cats2$YEAR >= 1600 & cats2$YEAR <= 1699] <-  "17C"
cats2$EPOCH[cats2$YEAR >= 1700 & cats2$YEAR <= 1799] <-  "18C"
cats2$EPOCH[cats2$YEAR >= 1800 & cats2$YEAR <= 1899] <-  "19C"
cats2$EPOCH[cats2$YEAR >= 1900 & cats2$YEAR <= 1949] <-  "1900-"
cats2$EPOCH[cats2$YEAR >= 1950 & cats2$YEAR <= 1974] <-  "1950-"
cats2$EPOCH[cats2$YEAR >= 1975] <-  "1975+"
as.factor(cats2$EPOCH, levels = c("<1600","17C","18C","19C","1900-","1950-","1975+"))
as.factor(cats2$EPOCH, levels = c("<1600","17C","18C","19C","1900-","1950-","1975+"), labels = levels)
cats2$EPOCH <- c()
cats2$EPOCH[cats2$YEAR < 1600] <-  0
cats2$EPOCH[cats2$YEAR >= 1600 & cats2$YEAR <= 1699] <-  1
cats2$EPOCH[cats2$YEAR >= 1700 & cats2$YEAR <= 1799] <-  2
cats2$EPOCH[cats2$YEAR >= 1800 & cats2$YEAR <= 1899] <-  3
cats2$EPOCH[cats2$YEAR >= 1900 & cats2$YEAR <= 1949] <-  4
cats2$EPOCH[cats2$YEAR >= 1950 & cats2$YEAR <= 1974] <-  5
cats2$EPOCH[cats2$YEAR >= 1975] <-  6
as.factor(cats2$EPOCH, labels = c("<1600","17C","18C","19C","1900-","1950-","1975+"))
cats2$EPOCH <- c()
cats2$EPOCH[cats2$YEAR < 1600] <-  0
cats2$EPOCH[cats2$YEAR >= 1600 & cats2$YEAR <= 1699] <-  1
cats2$EPOCH[cats2$YEAR >= 1700 & cats2$YEAR <= 1799] <-  2
cats2$EPOCH[cats2$YEAR >= 1800 & cats2$YEAR <= 1899] <-  3
cats2$EPOCH[cats2$YEAR >= 1900 & cats2$YEAR <= 1949] <-  4
cats2$EPOCH[cats2$YEAR >= 1950 & cats2$YEAR <= 1974] <-  5
cats2$EPOCH[cats2$YEAR >= 1975] <-  6
factor(cats2$EPOCH, labels = c("<1600","17C","18C","19C","1900-","1950-","1975+"))
mosaic(~ EPOCH + SUBJECT, data = cats2, shade = TRUE, legend = TRUE)
cats2
mosaic(~ EPOCH, data = cats2, shade = TRUE, legend = TRUE)
mosaic(~ SUBJECT, data = cats2, shade = TRUE, legend = TRUE
)
library(shiny)
runApp("/Users/TumblesPro/Dropbox/attn/-To\ Read-/Tutorials/2013-05-07\ -\ Shiny\ Tutorial\ (TV\ Episode\ Rankings)")
runAppl
runApp
runApp()
runApp("/Users/TumblesPro/Dropbox/attn/-To\ Read-/Tutorials/2013-05-07\ -\ Shiny\ Tutorial\ (TV\ Episode\ Rankings)")
runApp("/Users/TumblesPro/Desktop/Demo/")
install.packages("shinyIncubator")
library(shinyIncubator)
install.packages("shinyIncubator", repos = "http://cran.us.r-project.org/")
runApp("/Users/TumblesPro/Desktop/Demo/")
install.packages("changepoint")
devtools::install_github("shiny-incubator", "rstudio")
runApp("/Users/TumblesPro/Desktop/Demo/")
squid <- read.csv("data\"squid.csv")
library(shiny)
runApp("/Users/TumblesPro/Desktop/TV/")
?shiny
??vignettes
vignette
vignette(shiny)
vignettes(shiny)
runExample()
runExample("08_html")
runExample("03_reactivity")
runExample("04_mpg")
runExample("06_tabsets")
install.packages(c("arm", "bitops", "BMA", "brglm", "caret", "chron", "class", "classInt", "corrgram", "doBy", "dynamicTreeCut", "evaluate", "FAiR", "fda", "formatR", "gam", "glmnet", "googleVis", "heplots", "hergm", "HistData", "Hotelling", "httpuv", "knitr", "KRLS", "lattice", "latticeExtra", "maps", "maptools", "MASS", "mda", "mice", "minpack.lm", "mirt", "mosaic", "multcomp", "MultiLCIRT", "mvoutlier", "nlme", "nloptr", "pls", "png", "polynom", "profileModel", "qgraph", "quantreg", "R.devices", "R2jags", "Rcmdr", "RcppArmadillo", "Rd2roxygen", "rgdal", "rgl", "rjags", "rjson", "rpart", "rpf", "rrcov", "Rserve", "sda", "shiny", "spam", "SparseM", "spatstat", "spdep", "splancs", "spls", "VennDiagram", "xts", "yaml"))
library(rpart)
library(plyr)
library(rpart.plot)
install.packages("rpart.plot", dep=T)
library(rpart.plot)
?rpart
ebike = read.csv("E-Bike_Survey_Responses.csv")
ebike[,2:10][ebike[,2:10] == ''] = NA
ebike$Sex = mapvalues(ebike$Sex, c('',levels(ebike$Sex)[-c(1,2,6)]), c('Other', rep("Other",10)))
?macpvalues
?mapvalues
levels(ebike$Sex)
ebike = read.csv("E-Bike_Survey_Responses.csv")
ebike[,2:10][ebike[,2:10] == ''] = NA
levels(ebike$Sex)
levels(ebike$Sex)[-c(1,2,6)])
levels(ebike$Sex)[-c(1,2,6)]
ebike$Health = mapvalues(ebike$How.would.you.describe.your.level.of.physical.health., c('', levels(ebike$How.would.you.describe.your.level.of.physical.health.)[-c(1,4,5,6,12,13)]), c(NA, rep("Other",7)))
ebike$Edu = mapvalues(ebike[,5], c('', levels(ebike[,5])[-c(1,4,8,14,23)]), c(NA, rep('Other',20)))
ebike$Income = mapvalues(ebike[,6], '', NA)
ebike$Age = mapvalues(ebike[,2], '', NA)
ebike$transport = factor(ifelse(grepl("bicycle",ebike[,11]),"Bicycle",
ifelse(grepl("e-bike", ebike[,11]), "E-bike",
ifelse(grepl("car", ebike[,11]), "Car",
ifelse(grepl("transit", ebike[,11]), "Transit","Other")))))
b = rpart(transport == "E-bike"~ Sex + Health + Age, data=ebike)
c = rpart(transport == "E-bike" ~ Edu + Income, data=ebike)
rpart.plot(b, type=1,extra=1, varlen=0, faclen=10)
rpart.plot(c, type=1,extra=1, varlen=0, faclen=20)
# first: install dependent packages
install.packages(c("MASS", "akima", "robustbase"))
# second: install suggested packages
install.packages(c("cobs", "robust", "mgcv", "scatterplot3d", "quantreg", "rrcov", "lars", "pwr", "trimcluster", "parallel", "mc2d", "psych", "Rfit"))
# third: install an additional package which provides some C functions
install.packages('devtools')
library("devtools")
install_github( "WRScpp", "mrxiaohe")
# fourth: install WRS
install.packages("WRS", repos="http://R-Forge.R-project.org", type="source")
a<-matrix(c(
0.858,NA,
2.05,NA,
1.422,NA,
0.699,NA,
1.560,NA,
1.088,NA,
1.398,NA,
1.246,NA,
1.529,NA,
1.247,NA,
1.079,NA,
1.229,NA,
NA,1.039,
NA,1.112,
NA,1.771,
NA,0.895,
NA,1.621,
NA,0.887,
NA,1.554,
NA,1.832,
NA,1.066,
NA,1.148,
NA,1.178,
NA,1.015),ncol=2,byrow=TRUE)
d<- matrix(c(
-0.513,NA,
1.171,NA,
0.569,NA,
0.303,NA,
0.227,NA,
-0.167,NA,
1.194,NA,
0.502,NA,
0.316,NA,
0.890,NA,
-0.086,NA,
0.634,NA,
NA,0.322,
NA,0.070,
NA,1.048,
NA,0.202,
NA,0.520,
NA,0.523,
NA,0.405,
NA,0.591,
NA,0.678,
NA,0.275,
NA,0.761,
NA,0.334),ncol=2,byrow=TRUE)
itemtype<-c(rep('dich',24))
mu<-c(0,0)
sigma<-diag(2)
sigma[2,1]<-sigma[1,2]<-1
#simulating data
mydata<-simdata(a,d,3000,itemtype,mu=mu,sigma=sigma)
library(mirt)
mydata<-simdata(a,d,3000,itemtype,mu=mu,sigma=sigma)
?PARSCALE
??PARSCALE
a[1]
d[1]
-d[1] / a[1]
b.1 <-  -d[1] / a[1]
d.0 <- a[1] * (0 - b.1)
d.0
d.1 <- a[1] * (1 - b.1)
d.1
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
devtools::install_github(pkgs, "ramnathv", ref = "dev")
a <- data.frame(x = 1:3, y = 4:6)
attr(a)
attributes(a)
attr(a, "experiment_id") <- "exp_1"
attributes(a)
dat <- cars
cars
cor(dat[, 1:2], use = "pairwise.complete.obs", method = "pearson")
cor(dat[, c(1,2)], use = "pairwise.complete.obs", method = "pearson")
install.packages(c("akima", "ape", "arm", "beeswarm", "betareg", "BradleyTerry2", "bst", "car", "coin", "colorspace", "data.table", "doBy", "effects", "equate", "evaluate", "ez", "fdrtool", "flexmix", "gmodels", "gtools", "HSAUR", "influence.ME", "ipred", "KernSmoothIRT", "knitr", "labdsv", "likert", "lme4", "lmtest", "maps", "maxLik", "mboost", "MEMSS", "MLCM", "mlmRev", "modeltools", "multcomp", "mvtnorm", "partDSA", "party", "partykit", "pbkrtest", "pheatmap", "plotrix", "psychotree", "quantreg", "R.devices", "R.methodsS3", "R.oo", "R.rsp", "R.utils", "relaimpo", "rgeos", "rgl", "RODBC", "RWeka", "RWekajars", "seriation", "slam", "snow", "sp", "spam", "spatstat", "spdep", "stargazer", "statmod", "tripack", "TSP", "vcd", "vcdExtra", "vegan", "VGAM", "Zelig"))
library(Hmisc)
?rcorr
x <- c(-2, -1, 0, 1, 2)
y <- c(4,   1, 0, 1, 4)
z <- c(1,   2, 3, 4, NA)
v <- c(1,   2, 3, 4, 5)
rcorr(cbind(x,y,z,v))
a <- rcorr(cbind(x,y,z,v))
a
str(a)
a$P
dat <- read.delim("Field(2006).dat")
library(ggplot2)
library(RColorBrewer)
#reading in text data - this is the format you need your data
zz <- textConnection("Method_X Method_Y Traits_X Traits_Y Corr
1 1 a a .89
1 1 a b .51
1 1 b b .89
1 1 a c .38
1 1 b c .37
1 1 c c .76
1 2 a a .57
1 2 b a .22
1 2 c a .09
1 2 a b .22
1 2 b b .57
1 2 c b .10
1 2 a c .11
1 2 b c .11
1 2 c c .46
2 2 a a .93
2 2 a b .68
2 2 b b .94
2 2 a c .59
2 2 b c .58
2 2 c c .84
1 3 a a .56
1 3 b a .22
1 3 c a .11
1 3 a b .23
1 3 b b .58
1 3 c b .12
1 3 a c .11
1 3 b c .11
1 3 c c .45
2 3 a a .67
2 3 b a .42
2 3 c a .33
2 3 a b .43
2 3 b b .66
2 3 c b .34
2 3 a c .34
2 3 b c .32
2 3 c c .58
3 3 a a .94
3 3 a b .67
3 3 b b .92
3 3 a c .58
3 3 b c .60
3 3 c c .85
")
mydata <- read.table(zz, header = TRUE)
close(zz)
#making factors
#mydata$Method_Row <- factor(mydata$Method_Row)
#mydata$Method_Col <- factor(mydata$Method_Col)
#building ggplot
mtmm_plot <- ggplot(data= mydata) +
layer(geom = 'tile', mapping = aes(x = Traits_X, y = Traits_Y, fill = Corr)) +
facet_grid(Method_Y ~ Method_X) +
theme_bw() + opts(panel.background = theme_rect(colour = NA)) + opts(panel.grid.minor = theme_blank()) +
opts(axis.line = theme_segment()) + opts(strip.background = theme_blank())
mtmm_plot
#note, apparently SPSS and ggplot2 do facets opposite each other, also not sure how to make Y axis descending
#instead of ascending - equivalent to "reverse()" in SPSS
#scale_fill_manual(values = brewer.pal(5,"Greys"), breaks = c("0.2", "0.4", "0.6", "0.8"))
#color not working, perhaps check out the new gradient fills for ggplot2
corm[which(
corm[ ,'trait_X']!=corm[,'trait_Y']
& corm[,'method_X']!=corm[,'method_Y']), 'type'] = 'heterotrait-heteromethod'
corm[which(
corm[, 'trait_X']==corm[,'trait_Y']
& corm[,'method_X']==corm[,'method_Y']), 'type'] = 'monotrait-monomethod (reliability)'
#corm = corm[ corm[,'Var1']!=corm[,'Var2'] , ] # you could substitute the 1s with the scale reliabilities here
corm$trait_X = factor(corm$trait_X)
corm$trait_Y = factor(corm$trait_Y,levels=rev(levels(corm$trait_X)))
corm$method_X = factor(corm$method_X)
corm$method_Y = factor(corm$method_Y,levels=levels(corm$method_X))
corm = corm[order(corm$method_X,corm$trait_X),]
corm = corm[!duplicated(corm[,c('var1.s','var2.s')]), ] # remove dupe pairs
#building ggplot
mtmm_plot <- ggplot(data= corm) + # the melted correlation matrix
layer(geom = 'raster', mapping = aes(x = trait_X, y = trait_Y, fill = type)) +
#layer(geom = 'raster', mapping = aes(x = trait_X, y = trait_Y,  fill = abs(value))) + # the tiles (raster is faster, tiles are the same size)
layer(geom = 'text', mapping = aes(x = trait_X, y = trait_Y, label = round(value,2),size=log(abs(value)),colour=abs(value))) + # the correlation text
facet_grid(method_Y ~ method_X) +
theme_bw() +
theme(panel.background = element_rect(colour = NA),
panel.grid.minor = element_blank(),
axis.line = element_line(),
strip.background = element_blank(),
panel.grid = element_blank()
) +
scale_fill_brewer('Type') +
scale_size("Absolute size",guide=F) +
scale_colour_gradient(guide=F)
mtmm_plot
cors = cor(imput[,c('affUMS_p','powUMS_p','achUMS_p','affXMS_p','powXMS_p','achXMS_p','affXMS_s','powXMS_s','achXMS_s', 'affOPT_s', 'powOPT_s', 'achOPT_s')]) # select variables
corm = melt(cors)
corm[, c('trait_X','method_X')] = str_match(corm$Var1,"^([a-z][a-z][a-z])((\\.([a-z][a-z][a-z]))?([A-Z0-9_][A-Z0-9_][A-Z0-9_])?_(d|c|z|s|l|p|t))$")[,c(2,3)]  # regex matching our column naming schema to extract trait and method
corm[, c('trait_Y','method_Y')] = str_match(corm$Var2,"^([a-z][a-z][a-z])((\\.([a-z][a-z][a-z]))?([A-Z0-9_][A-Z0-9_][A-Z0-9_])?_(d|c|z|s|l|p|t))$")[,c(2,3)]
corm[,c('var1.s','var2.s')] <- t(apply(corm[,c('Var1','Var2')], 1, sort)) # sort pairs to find dupes
corm[which(
corm[ ,'trait_X']==corm[,'trait_Y']
& corm[,'method_X']!=corm[,'method_Y']),'type'] = 'monotrait-heteromethod (validity)'
corm[which(
corm[ ,'trait_X']!=corm[,'trait_Y']
& corm[,'method_X']==corm[,'method_Y']), 'type'] = 'heterotrait-monomethod'
corm[which(
corm[ ,'trait_X']!=corm[,'trait_Y']
& corm[,'method_X']!=corm[,'method_Y']), 'type'] = 'heterotrait-heteromethod'
corm[which(
corm[, 'trait_X']==corm[,'trait_Y']
& corm[,'method_X']==corm[,'method_Y']), 'type'] = 'monotrait-monomethod (reliability)'
#corm = corm[ corm[,'Var1']!=corm[,'Var2'] , ] # you could substitute the 1s with the scale reliabilities here
corm$trait_X = factor(corm$trait_X)
corm$trait_Y = factor(corm$trait_Y,levels=rev(levels(corm$trait_X)))
corm$method_X = factor(corm$method_X)
corm$method_Y = factor(corm$method_Y,levels=levels(corm$method_X))
corm = corm[order(corm$method_X,corm$trait_X),]
corm = corm[!duplicated(corm[,c('var1.s','var2.s')]), ] # remove dupe pairs
#building ggplot
mtmm_plot <- ggplot(data= corm) + # the melted correlation matrix
layer(geom = 'raster', mapping = aes(x = trait_X, y = trait_Y, fill = type)) +
#layer(geom = 'raster', mapping = aes(x = trait_X, y = trait_Y,  fill = abs(value))) + # the tiles (raster is faster, tiles are the same size)
layer(geom = 'text', mapping = aes(x = trait_X, y = trait_Y, label = round(value,2),size=log(abs(value)),colour=abs(value))) + # the correlation text
facet_grid(method_Y ~ method_X) +
theme_bw() +
theme(panel.background = element_rect(colour = NA),
panel.grid.minor = element_blank(),
axis.line = element_line(),
strip.background = element_blank(),
panel.grid = element_blank()
) +
scale_fill_brewer('Type') +
scale_size("Absolute size",guide=F) +
scale_colour_gradient(guide=F)
mtmm_plot
??error
library(Hmisc)
?errbar
x <- 1:10
y <- x + rnorm(10)
delta <- runif(10)
errbar( x, y, y + delta, y - delta )
?errbar
detach:::Hmisc
detach("package:Hmisc", unload=TRUE)
library(psych)
??error.bars
?error.bars
x <- replicate(20,rnorm(50))
boxplot(x,notch=TRUE,main="Notched boxplot with error bars")
error.bars(x,add=TRUE)
abline(h=0)
error.bars(attitude,bar=TRUE)
error.bars(attitude,bar=FALSE)
library(datasets)
data <- PlantGrowth
View(data)
?PlantGrowth
?chickwts
head(chickwts)
str(chickwts)
chickwts$feed
levels(chickwts)
levels(chickwts$feed)
?PlantGrowth
PlantGrowth
ChickWeight
dat <- c(1,4,5,7,7,10,12)
?percentile
??percentile
quantile(dat, c(.25))
quantile(dat, c(.5))
quantile(dat, c(.75))
?quantile
quantile(dat, c(.75), 3)
quantile(dat, c(.25), 3)
quantile(dat, c(.25), 2)
quantile(dat, c(.25), 4)
quantile(dat, c(.25), 5)
quantile(dat, c(.25), 6)
quantile(dat, c(.25), 7)
quantile(dat, c(.25), 8)
quantile(dat, c(.25), type = 8)
quantile(dat, c(.25), type = c(1:8))
quantile(dat, c(.25), type = c(1,2,3,4,5,6,7,8))
for(type in 1:9) y <- quantile(dat, .25, type = type)
y
for(type in 1:9) rest[type, ] <- y <- quantile(dat, .25, type = type)
res <- matrix(as.numeric(NA), 9, 7)
for(type in 1:9) res[type, ] <- y <- quantile(dat, .25, type = type)
res
res <- matrix(as.numeric(NA), 9, 1)
for(type in 1:9) res[type, ] <- y <- quantile(dat, .25, type = type)
res
dat
viewData()
viewdata()
View(res)
?scatterplotMatrix
??scatterplotMatrix
library(car)
?scatterplotMatrix
ChickWeightD1D3 <- ChickWeight[ChickWeight$Diet == "1" | ChickWeight$Diet == "3", ]
str(ChickWeightD1D3)
ChickWeightD1D3 <- ChickWeight[(ChickWeight$Diet == "1" | ChickWeight$Diet == "3"), ]
cw <- ChickWeight
str(cw)
ChickWeightD1 <- ChickWeight[ChickWeight$Diet == "1", ]
ChickWeightD3 <- ChickWeight[ChickWeight$Diet == "3", ]
cw2 <- rbind(ChickWeightD1, ChickWeightD3)
library(psych)
error.bars.by(spider$Anxiety, spider$Group, by.var = TRUE)
str(cw2)
library(psych)
error.bars.by(cw2$weight, cw2$Diety, by.var = TRUE)
library(psych)
error.bars.by(cw2$weight, cw2$Diet, by.var = TRUE)
?options
options
op <- options()
op
rstudio::viewData(res)
library(rstudio)
?rstudio
?View
View
.rs.callAs
CW <- ChickWeight[ChickWeight$Diet == "1" | ChickWeight$Diet == "3", ]
symbox(CW, powers = c(-2, -1, -0.5, 0, 0.5, 1, 2))
library(car)
symbox(CW, powers = c(-2, -1, -0.5, 0, 0.5, 1, 2))
?symbox
head(CW)
symbox(~ weight[diet == 1], data = CW)
symbox(~ weight, data = CW)
symbox(~ weight, data = CW[diet == 1,])
symbox(~ weight, data = CW[CW$diet == 1,])
symbox(~ weight, data = CW[,CW$diet == 1])
symbox(~ weight | diet, data = CW)
symbox(~ weight, subset = diet, data = CW)
library(psych)
error.bars.by(CW$weight, CW$Diet, by.var = TRUE)
CW <- ChickWeight[ChickWeight$Diet == "1" | ChickWeight$Diet == "3", ]
library(psych)
error.bars.by(CW$weight, CW$Diet, by.var = TRUE)
CW <- ChickWeight[ChickWeight$Diet == "1" | ChickWeight$Diet == "3", ]
CW$Diet <- factor(CW$Diet)
error.bars.by(CW$weight, CW$Diet, by.var = TRUE)
?error.bars.by
error.bars.by(CW$weight, CW$Diet, by.var = FALSE)
stat.desc(CW$weight[CW$Diet == "3"], norm = T)
library(pastecs)
stat.desc(CW$weight[CW$Diet == "3"], norm = T)
levels(CW)
levels(CW$diet)
levels(CW$Diet)
?t.test
`Field&Hole` <- read.delim("~/Desktop/Field&Hole.dat")
View(`Field&Hole`)
data <- Field&Hole
data <- 'Field&Hole'
View(`Field&Hole`)
data <- `Field&Hole`
data$diff <- women - statbook
data$diff <- data$women - data$statbook
boxplot(data$diff)
describe(data$diff)
symbox(~ diff, data = data)
symbox(~ diff, data)
str(data$diff)
min(data$diff)
data$diffp <- data$diff + 50
symbox(~ diffp, data)
hist(data$diff)
hist(data$women)
hist(data$statbook)
library(ggvis)
setwd("~/Desktop/ggvis")
library(shiny)
runApp()
?ggvis
runApp()
ggvis(mtcars, props(x = ~ disp, y = ~ mpg)
)
head(mtcars)
ggvis(mtcars, props(x = ~ disp, y = ~ mpg),
mark_symbol(),
dscale("x", "numeric", domain = input$x_domain, nice = FALSE, clamp = TRUE),
dscale("y", "numeric", domain = input$y_domain, nice = FALSE, clamp = TRUE)
)
ggvis(mtcars, props(x = ~ disp, y = ~ mpg),
mark_symbol(),
dscale("x", "numeric", nice = FALSE, clamp = TRUE),
dscale("y", "numeric", nice = FALSE, clamp = TRUE)
)
?dscape
?ggvis
runApp()
?shinyUI
